paths:
  # Get all users
  /api/v1/user/all:
    get:
      security: [{ jwt: [] }]
      tags: [User Routes]
      summary: Returns a list of users.
      description: Optional extended description in CommonMark or HTML.
      responses:
        "200":
          description: OK
        "400":
          description: Bad request. User ID must be an integer and larger than 0.
        "401":
          description: Authorization information is missing or invalid.
        "404":
          description: A user with the specified ID was not found.
        "5XX":
          description: Unexpected error.
  # Get user by id
  /api/v1/user/{userId}:
    get:
      tags: [User Routes]
      summary: Returns a user by ID.
      parameters:
        - name: userId
          in: path
          required: true
          description: The Id of the user you want returned
          schema:
            type: string
            minimum: 15
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request. User ID must be an integer and larger than 0.
        "401":
          description: Authorization information is missing or invalid.
        "404":
          description: A user with the specified ID was not found.
        "5XX":
          description: Unexpected error.
  # Create a user / sign up
  /api/v1/user:
    post:
      tags: [User Routes]
      summary: Creates a user.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: OK
        "400":
          description: Bad request. User ID must be an integer and larger than 0.
        "401":
          description: Authorization information is missing or invalid.
        "404":
          description: A user with the specified ID was not found.
        "5XX":
          description: Unexpected error.

  /api/v1/user/update/{id}:
    patch:
      security: [{ jwt: [] }]
      tags: [User Routes]
      summary: Update user.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to update.
          schema:
            type: string
            minimum: 15
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userUpdate"
      responses:
        '200':
          description: OK

# schemas
components:
  schemas:
    User:
      type: object
      properties:
        surname:
          type: string
          example: NETERO
        given_name:
          type: string
          example: Isaac
        email:
          type: string
          example: netero@huntersguild.com
        password:
          type: string
          example: HunterxHunter@1
      # all properties are required
      required:
        - surname
        - given_name
        - email
        - password
    userUpdate:
      type: object
      properties:
        province:
          type: string
        district:
          type: string
        surname: 
          type: string
        given_name: 
          type: string
        sector: 
          type: string
        cell: 
          type: string
        street:
          type: string
        avatar:
          type: string
